#!/usr/bin/env python3# -*- coding: utf-8 -*-"""Created on Tue Feb 1 11:59:01 2024@author: johnomole"""import torchimport tiktokenimport picklefrom review_card import ReviewCardfrom model import BigramLanguageModelfrom dataclasses import dataclassmodel_pkl_file = "model-gpt-01.pkl"  device ='cuda' if torch.cuda.is_available() else 'cpu'review_handler = ReviewCard()@dataclassclass GPTConfig:    block_size: int = 64    batch_size:int = 256    vocab_size: int = 50304 # GPT-2 vocab_size of 50257, padded up to nearest multiple of 64 for efficiency    n_layer: int = 4    n_head: int = 4    n_embd: int = 384    dropout: float = 0.2    learning_rate:float = 3e-4    max_iters:int = 5000    eval_iters:int = 384    eval_interval:int = 1000    bias: bool = True # True: bias in Linears and LayerNorms, like GPT-2. False: a bit better and fasterconfig = GPTConfig()model = BigramLanguageModel(config)# hyperparameters# =============================================================================# block_size =64# batch_size =256# max_iters = 5000# eval_interval = 500# learning_rate = lr=3e-4# eval_iters = 384# device ='cuda' if torch.cuda.is_available() else 'cpu'# n_embd = 384# n_head = 4# n_layer = 4# dropout =0.2# =============================================================================torch.manual_seed(1337)text = review_handler.review_cralwer(page_size=2)#unique character that occur in this text# =============================================================================# chars=sorted(list(set(text)))# vocab_size = len(chars)# =============================================================================data  = '\n'.join(row['message'] for row in text)# =============================================================================# #unique character that occur in this text# chars=sorted(list(set(text)))# vocab_size = len(chars)# # # tokenise# stoi = {ch:i for i,ch in enumerate(chars)}# itos = {i:ch for i,ch in enumerate(chars)}# encode =lambda s:[stoi[c] for c in s] #encoder: take a string, output a list of integers# decode = lambda l: ''.join([itos[i] for i in l]) #encoder: take a integer, output a string# # # data = torch.tensor(encode(text), dtype=torch.long)# # train = data[:n]# val = data[n:]# =============================================================================# Train and test splits# encoding with tiktokenenc =tiktoken.get_encoding('gpt2')data_enc = torch.tensor(enc.encode_ordinary(data), dtype=torch.long)# =============================================================================# train = enc.encode_ordinary(data[:n])# val = enc.encode_ordinary(data[n:])# =============================================================================n = int(0.9 * len(data_enc)) # 90% will be train, rest valtrain = data_enc[:n]val = data_enc[n:]# data loadingdef get_batch(split, config):    data = train if split == 'train' else val    ix = torch.randint(len(data)-config.block_size,(config.batch_size,))    x = torch.stack([data[i:i+ config.block_size] for i in ix])    y = torch.stack([data[i+1:i+config.block_size+1] for i in ix])    x,y = x.to(device), y.to(device)    return x,y@torch.no_grad()def estimate_loss(config):    out = {}    model.eval()    for split in ['train', 'val']:        losses = torch.zeros(config.eval_iters)        for k in range(config.eval_iters):            X,Y =get_batch(split, config)            logits, loss = model(X,Y)            losses[k] = loss.item()        out[split] =losses.mean()    model.train()    return outm = model.to(device)# Create pytorch optimiseroptimizer =torch.optim.Adam(m.parameters(), lr=config.learning_rate)for iter in range(config.max_iters):        # every oncein a while evaluate the loss on train and val sets    if iter % config.eval_interval ==0:        losses = estimate_loss(config)        print(f"step {iter}: train loss {losses['train']:.4f}, val loss {losses['val']:.4f}")            # sample a batch of data    xb, yb = get_batch(split = "train", config=config)    logits, loss =  model(xb, yb)    optimizer.zero_grad(set_to_none=True)    loss.backward()    optimizer.step()    # Save the modelwith open(model_pkl_file, 'wb') as file:      pickle.dump(m, file)# =============================================================================# # class Head(nn.Module):#     def __init__(self, head_size):#         super().__init__()#         self.key = nn.Linear(n_embd, head_size, bias=False)#         self.query = nn.Linear(n_embd, head_size, bias=False)#         self.value = nn.Linear(n_embd, head_size, bias=False)#         self.register_buffer('tril', torch.tril(torch.ones(block_size, block_size)))#         #         self.dropout = nn.Dropout(dropout)#         #     def forward(self, x):#         B,T,C = x.shape#         k = self.key(x) # B,T, C#         q = self.query(x) # B, T, C#         # COMPUTE ATTENTION scores ("affinities")#         wei = q @ k.transpose(-2, -1) * C**-0.5 # (B,T,C)  @ (B, C, T) --> (B, T, T)#         wei = wei.masked_fill(self.tril[:T, :T]==0, float('-inf')) #(B, T, T)#         wei = F.softmax(wei, dim=-1)#         wei = self.dropout(wei)#         # perform the weighted aggregation of the values#         v = self.value(x) # (B,T,C)#         out = wei @ v # (B, T, T) @ (B, T, C) -> (B, T, C)#         return out# # class MultiHeadAttention(nn.Module):#     """multiple heads of self-attention in parallel"""#     def __init__(self, num_heads, head_size):#         super().__init__()#         self.heads = nn.ModuleList([Head(head_size) for _ in range(num_heads)])#         self.proj = nn.Linear(n_embd, n_embd)#         self.dropout = nn.Dropout(dropout)#     def forward(self, x):#         out =torch.cat([h(x) for h in self.heads], dim=-1)#         out = self.dropout(self.proj(out))#         return out# # class FeedForward(nn.Module):#     """#         a simple linear layer followed by a non-linearity#     """#     def __init__(self, n_embd):#         super().__init__()#         self.net = nn.Sequential(#             nn.Linear(n_embd, 4 * n_embd),#             nn.ReLU(),#             nn.Linear(4 * n_embd, n_embd),#             nn.Dropout(dropout)#             )#     def forward(self, x):#         return self.net(x)# # class Block(nn.Module):#     """ Transfomer block: communication followed by computation """#     def __init__(self, n_embd, n_head):#         # n_embd: embedding dimension, n_head: the number of heads we'd like#         super().__init__()#         head_size = n_embd // n_head#         self.sa = MultiHeadAttention(n_head, head_size)#         self.ffwd = FeedForward(n_embd)#         self.ln1 = nn.LayerNorm(n_embd)#         self.ln2 = nn.LayerNorm(n_embd)#         #         #     def forward(self, x):#         x = x + self.sa(self.ln1(x))#         x = x + self.ffwd(self.ln2(x))#         #         return x# # class BigramLanguageModel(nn.Module):#     def __init__(self):#         super().__init__()#         # each token directly reads off the logits for the next token from a lookup table#         self.token_embedding_table =nn.Embedding(vocab_size, n_embd)#         self.position_embedding_table = nn.Embedding(block_size, n_embd)#         self.blocks = nn.Sequential(#                 *[Block(n_embd, n_head=n_head) for _ in range(n_layer)]#             )#         self.ln_f = nn.LayerNorm(n_embd) # final layer norm# # =============================================================================# #         self.blocks = nn.Sequential(# #             Block(n_embd, n_head = 4),# #             Block(n_embd, n_head = 4),# #             Block(n_embd, n_head = 4),# #             Block(n_embd, n_head = 4),# #             nn.LayerNorm(n_embd),# #             )# # =============================================================================# # =============================================================================# #         self.sa_head = MultiHeadAttention(4, n_embd//4) #i.e 4 heads of 8-dimensional self-attention# #         self.ffwd = FeedForward(n_embd)# #         # # =============================================================================#         self.lm_head =nn.Linear(n_embd, vocab_size)#         #         #     def forward(self, idx, targets=None):#         B, T = idx.shape#         #         tok_emb =self.token_embedding_table(idx) #(B T C)#         pos_emb = self.position_embedding_table(torch.arange(T, device=device)) # (T,C)#         x = tok_emb + pos_emb # (B,T,C)#         x = self.blocks(x) #(B, T, C)#         x = self.ln_f(x)#         logits = self.lm_head(x) # (B,T,vocab_size)#         if targets is None:#             loss=None#         else:#             B,T,C = logits.shape#             logits = logits.view(B*T, C)#             targets = targets.view(B*T)#             loss = F.cross_entropy(logits, targets)#         return logits, loss#     #     def generate(self, idx, max_new_tokens):#         #idx is (B,T) array of indeces in the current context#         #         for _ in range(max_new_tokens):#             # crop idx to the last block_size tokens#             idx_cond = idx[:, -block_size:]#             # get predictions#             logits, loss = self(idx_cond)#             logits = logits[:,-1, :]#             probs =F.softmax(logits, dim=-1)#             idx_next =torch.multinomial(probs, num_samples=1)#             idx =torch.cat((idx, idx_next), dim=1)#         return idx# # =============================================================================    # =============================================================================# # generate from the model# context = torch.zeros((1,1), dtype=torch.long, device=device)# print(enc.decode(m.generate(context, max_new_tokens=500)[0].tolist()))# # =============================================================================#open('more.txt', 'w').write(decode(m.generate(context, max_new_tokens=10000)[0].tolist()))